@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ProyectoFinalAp1.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="row justify-content-center align-items-center vh-100 bg-light">
    <div class="col-md-6 col-lg-5 col-xl-4">
        <div class="card shadow-lg rounded-4 border-0 p-4 p-md-5 bg-white">
            <div class="text-center mb-4">
                <img src="https://static.vecteezy.com/system/resources/previews/009/789/289/non_2x/airplane-with-paper-plane-launch-logo-free-vector.jpg"
                     alt="Logo"
                     style="max-width: 120px;"
                     class="mb-3 mx-auto d-block animate__animated animate__fadeInDown" />
                <h1 class="h3 fw-bold mb-1 animate__animated animate__fadeInUp">TheSkyMarket</h1>
                <p class="text-muted mb-4 animate__animated animate__fadeInUp animate__delay-1s">Please login to your account</p>
            </div>

            <EditForm Model="Input" OnValidSubmit="LoginUser" FormName="login" class="animate__animated animate__fadeInUp animate__delay-2s">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-3" />

                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" id="email" placeholder="name@example.com" autocomplete="username" />
                    <label for="email">Email address</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" id="password" placeholder="Password" autocomplete="current-password" />
                    <label for="password">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>

                <div class="form-check form-switch mb-4">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" id="rememberMe" />
                    <label class="form-check-label" for="rememberMe">Remember me</label>
                </div>

                <button type="submit" class="btn btn-primary w-100 btn-lg fw-semibold shadow-sm" style="letter-spacing: 0.05em;">
                    Log In
                </button>

               
            </EditForm>
        </div>
    </div>
</div>




@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
